u <- runif(n=n, min = 0, max = pi)
v <- runif(n=n, min = 0, max = 2*pi)
x <- sin(u)*cos(v)+1
y <- sin(u)*sin(v)
z <- cos(u)
S2 <- cbind(x,y,z)
wedge <- rbind(S1, S2)
Diag2 <- ripsDiag(X = wedge, maxdimension = 2, maxscale = 3, library="GUDHI", location = FALSE, printProgress = FALSE)
library("TDA")
n <- 100
temp <-cbind(circleUnif(n=n, 1),0)
S1 <- temp - cbind(rep(1,n), rep(0,n), rep(0,n))
u <- runif(n=n, min = 0, max = pi)
v <- runif(n=n, min = 0, max = 2*pi)
x <- sin(u)*cos(v)+1
y <- sin(u)*sin(v)
z <- cos(u)
S2 <- cbind(x,y,z)
plot(S2)
plot(x,y)
plot(x,z)
wedge <- rbind(S1, S2)
Diag2 <- ripsDiag(X = wedge, maxdimension = 2, maxscale = 3, library="GUDHI", location = FALSE, printProgress = FALSE)
plot(Diag2[["diagram"]], main="RP^2")
library("TDA")
n <- 100
temp <-cbind(circleUnif(n=n, 1),0)
S1 <- temp - cbind(rep(1,n), rep(0,n), rep(0,n))
u <- runif(n=n, min = 0, max = pi)
v <- runif(n=n, min = 0, max = 2*pi)
x <- sin(u)*cos(v)+1
y <- sin(u)*sin(v)
z <- cos(u)
S2 <- cbind(x,y,z)
wedge <- rbind(S1, S2)
Diag2 <- ripsDiag(X = wedge, maxdimension = 2, maxscale = 3, library="GUDHI", location = FALSE, printProgress = FALSE)
plot(Diag2[["diagram"]], main="What is this?")
Diag2 <- ripsDiag(X = wedge, maxdimension = 2, maxscale = 2, library="GUDHI", location = FALSE, printProgress = FALSE)
plot(Diag2[["diagram"]], main="What is this?")
u <- runif(n=n, min = 0, max = pi)
v <- runif(n=n, min = 0, max = 2*pi)
x <- sin(u)*cos(v)+1
y <- sin(u)*sin(v)
z <- cos(u)
S2 <- cbind(x,y,z)
wedge <- rbind(S1, S2)
Diag2 <- ripsDiag(X = wedge, maxdimension = 2, maxscale = 2, library="GUDHI", location = FALSE, printProgress = FALSE)
plot(Diag2[["diagram"]], main="What is this?")
band <- bootstrapBand(X = wedge, FUN = kde, Grid = Grid, B = 100,parallel = FALSE, alpha = 0.1, h = h)
help(bootstrapBand)
band <- bootstrapBand(X = wedge, FUN = kde, B = 100,parallel = FALSE, alpha = 0.1, h = h)
Xlim <- c(-2.6, 2.6); Ylim <- c(-1.7, 1.7); by <- 0.065
Xseq <- seq(Xlim[1], Xlim[2], by = by)
Yseq <- seq(Ylim[1], Ylim[2], by = by)
Grid <- expand.grid(Xseq, Yseq)
band <- bootstrapBand(X = wedge, FUN = kde, Grid = Grid, B = 100,parallel = FALSE, alpha = 0.1, h = h)
plot(x,y)
plot(x,z)
Xlim <- c(-0.4, 2.4); Ylim <- c(-1.3, 1.3); Zlim <-c(-1.2, 1.2) by <- 0.065
Xseq <- seq(Xlim[1], Xlim[2], by = by)
Xlim <- c(-0.4, 2.4); Ylim <- c(-1.3, 1.3); Zlim <-c(-1.2, 1.2) by <- 0.065
Xlim <- c(-0.4, 2.4); Ylim <- c(-1.3, 1.3); Zlim <-c(-1.2, 1.2); by <- 0.065
Xseq <- seq(Xlim[1], Xlim[2], by = by)
Yseq <- seq(Ylim[1], Ylim[2], by = by)
Zseq <- seq(Zlim[1], Zlim[2], by = by)
Grid <- expand.grid(Xseq, Yseq, Zlim)
band <- bootstrapBand(X = wedge, FUN = kde, Grid = Grid, B = 100,parallel = FALSE, alpha = 0.1, h = h)
help("bootstrapBand")
band <- bootstrapBand(X = wedge, FUN = kde, Grid = Grid, B = 100,parallel = FALSE, alpha = 0.1, h = 0.3)
Diag <- gridDiag(X = wedge, FUN = kde, h = 0.3, lim = cbind(Xlim, Ylim, Zlim),
+ by = by, sublevel = FALSE, library = "Dionysus",
+ printProgress = FALSE)
Diag <- gridDiag(X = wedge, FUN = kde, h = 0.3, lim = cbind(Xlim, Ylim, Zlim), by = by, sublevel = FALSE, library = "Dionysus", printProgress = FALSE)
band <- bootstrapBand(X = wedge, FUN = kde, Grid = Grid, B = 100,parallel = FALSE, alpha = 0.1, h = 0.3)
plot(Diag[["diagram"]], band = 2 * band[["width"]], main = "KDE Diagram")
plot(Diag2[["diagram"]], band = 2 * band[["width"]], main = "KDE Diagram")
plot(Diag2[["diagram"]], band = 5 * band[["width"]], main = "KDE Diagram")
plot(Diag2[["diagram"]], band = 8 * band[["width"]], main = "KDE Diagram")
plot(Diag2[["diagram"]], band = 12 * band[["width"]], main = "KDE Diagram")
plot(Diag2[["diagram"]], band = 10 * band[["width"]], main = "KDE Diagram")
plot(Diag2[["diagram"]], band = 11 * band[["width"]], main = "KDE Diagram")
library("TDA")
n <- 100
temp <-cbind(circleUnif(n=n, 1),0)
S1 <- temp - cbind(rep(1,n), rep(0,n), rep(0,n))
u <- runif(n=n, min = 0, max = pi)
v <- runif(n=n, min = 0, max = 2*pi)
x <- sin(u)*cos(v)+1
y <- sin(u)*sin(v)
z <- cos(u)
S2 <- cbind(x,y,z)
wedge <- rbind(S1, S2)
Diag2 <- ripsDiag(X = wedge, maxdimension = 2, maxscale = 2, library="GUDHI", location = FALSE, printProgress = FALSE)
temp <-cbind(circleUnif(n=n, 1),0)
S1 <- temp - cbind(rep(1,n), rep(0,n), rep(0,n))
u <- runif(n=n, min = 0, max = pi)
v <- runif(n=n, min = 0, max = 2*pi)
x <- sin(u)*cos(v)+1
library("TDA")
n <- 100
temp <-cbind(circleUnif(n=n, 1),0)
S1 <- temp - cbind(rep(1,n), rep(0,n), rep(0,n))
u <- runif(n=n, min = 0, max = pi)
v <- runif(n=n, min = 0, max = 2*pi)
x <- sin(u)*cos(v)+1
y <- sin(u)*sin(v)
z <- cos(u)
S2 <- cbind(x,y,z)
wedge <- rbind(S1, S2)
Diag2 <- ripsDiag(X = wedge, maxdimension = 2, maxscale = 2, library="GUDHI", location = FALSE, printProgress = FALSE)
plot(Diag2[["diagram"]], main="What is this?")
Xlim <- c(-0.4, 2.4); Ylim <- c(-1.3, 1.3); Zlim <-c(-1.2, 1.2); by <- 0.065
Xseq <- seq(Xlim[1], Xlim[2], by = by)
Yseq <- seq(Ylim[1], Ylim[2], by = by)
Zseq <- seq(Zlim[1], Zlim[2], by = by)
Grid <- expand.grid(Xseq, Yseq, Zlim)
Diag <- gridDiag(X = wedge, FUN = kde, h = 0.3, lim = cbind(Xlim, Ylim, Zlim), by = by, sublevel = FALSE, library = "Dionysus", printProgress = FALSE)
Grid <- expand.grid(Xseq, Yseq, Zlim)
band <- bootstrapBand(X = wedge, FUN = kde, Grid = Grid, B = 100,parallel = FALSE, alpha = 0.1, h = 0.3)
plot(Diag2[["diagram"]], band = 11 * band[["width"]], main = "Is there something happening in H_2?")
plot(Diag2[["diagram"]], band = 10 * band[["width"]], main = "Is there something happening in H_2?")
plot(Diag2[["diagram"]], band = 10.5 * band[["width"]], main = "Is there something happening in H_2?")
library("TDA")
n <- 500
u <- runif(n=n, min = 0, max = pi/2)
v <- runif(n=n, min = 0, max = 2*pi)
x <- sin(u)*cos(v)
y <- sin(u)*sin(v)
z <- cos(u)
N <- cbind(x,y,z) #Northern Hemisphere
RP2 <- cbind(x*y, x*z, y*z, x + 2*y +3*z)
Diag1 <- ripsDiag(X = RP2, maxdimension = 1, maxscale = 2, library="GUDHI", location = FALSE, printProgress = FALSE)
n <-100
u <- runif(n=n, min = 0, max = pi/2)
v <- runif(n=n, min = 0, max = 2*pi)
x <- sin(u)*cos(v)
y <- sin(u)*sin(v)
z <- cos(u)
N <- cbind(x,y,z) #Northern Hemisphere
RP2 <- cbind(x*y, x*z, y*z, x + 2*y +3*z)
Diag1 <- ripsDiag(X = RP2, maxdimension = 1, maxscale = 2, library="GUDHI", location = FALSE, printProgress = FALSE)
plot(Diag1[["barcode"]], main="RP^2")
diagram
Diag1 <- ripsDiag(X = RP2, maxdimension = 1, maxscale = 2, library="GUDHI", location = FALSE, printProgress = FALSE)
plot(Diag1[["diagram"]], main="RP^2")
plot(Diag1[["barcode"]], main="RP^2")
plot(Diag1[["barcode"]], barcode = T, main="")
plot(Diag1[["diag"]], barcode = T, main="")
plot(Diag1[["diagram"]], barcode = T, main="")
n <-50
u <- runif(n=n, min = 0, max = pi/2)
v <- runif(n=n, min = 0, max = 2*pi)
x <- sin(u)*cos(v)
y <- sin(u)*sin(v)
z <- cos(u)
N <- cbind(x,y,z) #Northern Hemisphere
RP2 <- cbind(x*y, x*z, y*z, x + 2*y +3*z)
Diag1 <- ripsDiag(X = RP2, maxdimension = 1, maxscale = 2, library="GUDHI", location = FALSE, printProgress = FALSE)
plot(Diag1[["diagram"]], barcode = T, main="")
n <-20
u <- runif(n=n, min = 0, max = pi/2)
v <- runif(n=n, min = 0, max = 2*pi)
x <- sin(u)*cos(v)
y <- sin(u)*sin(v)
z <- cos(u)
N <- cbind(x,y,z) #Northern Hemisphere
RP2 <- cbind(x*y, x*z, y*z, x + 2*y +3*z)
Diag1 <- ripsDiag(X = RP2, maxdimension = 1, maxscale = 2, library="GUDHI", location = FALSE, printProgress = FALSE)
plot(Diag1[["diagram"]], barcode = T, main="")
n <-40
u <- runif(n=n, min = 0, max = pi/2)
v <- runif(n=n, min = 0, max = 2*pi)
x <- sin(u)*cos(v)
y <- sin(u)*sin(v)
z <- cos(u)
N <- cbind(x,y,z) #Northern Hemisphere
RP2 <- cbind(x*y, x*z, y*z, x + 2*y +3*z)
Diag1 <- ripsDiag(X = RP2, maxdimension = 1, maxscale = 2, library="GUDHI", location = FALSE, printProgress = FALSE)
plot(Diag1[["diagram"]], barcode = T, main="")
n <-40
u <- runif(n=n, min = 0, max = pi/2)
v <- runif(n=n, min = 0, max = 2*pi)
x <- sin(u)*cos(v)
y <- sin(u)*sin(v)
z <- cos(u)
N <- cbind(x,y,z) #Northern Hemisphere
RP2 <- cbind(x*y, x*z, y*z, x + 2*y +3*z)
Diag1 <- ripsDiag(X = RP2, maxdimension = 1, maxscale = 2, library="GUDHI", location = FALSE, printProgress = FALSE)
plot(Diag1[["diagram"]], barcode = T, main="")
library("TDA")
n <- 100
u <- runif(n=n, min = 0, max = pi/2)
v <- runif(n=n, min = 0, max = 2*pi)
x <- sin(u)*cos(v)
y <- sin(u)*sin(v)
z <- cos(u)
N <- cbind(x,y,z) #Northern Hemisphere
plot(N)
plot(N[,-1])
plot(N[,-2])
RP2 <- cbind(x*y, x*z, y*z, x + 2*y +3*z)
n <- 500
u <- runif(n=n, min = 0, max = pi/2)
v <- runif(n=n, min = 0, max = 2*pi)
x <- sin(u)*cos(v)
y <- sin(u)*sin(v)
z <- cos(u)
N <- cbind(x,y,z) #Northern Hemisphere
plot(N)
plot(N[,-1])
plot(N[,-2])
n <- 500
u <- runif(n=n, min = 0, max = pi/2)
v <- runif(n=n, min = 0, max = 2*pi)
x <- sin(u)*cos(v)
y <- sin(u)*sin(v)
z <- cos(u)
N <- cbind(x,y,z) #Northern Hemisphere
RP2 <- cbind(x*y, x*z, y*z, x + 2*y +3*z)
plot(N)
plot(RP2)
plot(RP2[,-1])
plot(RP2[,-c(1,2)])
library("TDA")
n <- 100
u <- runif(n=n, min = 0, max = pi)
v <- runif(n=n, min = 0, max = 2*pi)
x <- sin(u)*cos(v)
y <- sin(u)*sin(v)
z <- cos(u)
N <- cbind(x,y,z) #Northern Hemisphere
plot(N)
plot(N[,-1])
plot(N[,-2])
library("TDA")
n <- 100
u <- runif(n=n, min = 0, max = pi/2)
n <- 100
u <- runif(n=n, min = 0, max = pi/2)
v <- runif(n=n, min = 0, max = 2*pi)
x <- sin(u)*cos(v)
y <- sin(u)*sin(v)
z <- cos(u)
N <- cbind(x,y,z) #Northern Hemisphere
plot(N[,-1])
plot(N[,-2])
plot(N[,-3])
RP2 <- cbind(x*y, x*z, y*z, x + 2*y +3*z)
plot(RP2[,-c(1,2)])
Diag1 <- ripsDiag(X = RP2, maxdimension = 1, maxscale = 3, library="GUDHI", location = FALSE, printProgress = FALSE)
plot(Diag1[["diagram"]], main="RP^2")
library("TDA")
n <- 100
u <- runif(n=n, min = 0, max = pi/2)
v <- runif(n=n, min = 0, max = 2*pi)
x <- sin(u)*cos(v)
y <- sin(u)*sin(v)
z <- cos(u)
N <- cbind(x,y,z) #Northern Hemisphere
RP2 <- cbind(x*y, x*z, y*z, x + 2*y +3*z)
Diag1 <- ripsDiag(X = RP2, maxdimension = 1, maxscale = 3, library="GUDHI", location = FALSE, printProgress = FALSE)
plot(Diag1[["diagram"]], main="RP^2")
RP2 <- cbind(x*y, x*z, y*z, x^2 + 2*y^2 +3*z^2)
Diag1 <- ripsDiag(X = RP2, maxdimension = 1, maxscale = 3, library="GUDHI", location = FALSE, printProgress = FALSE)
plot(Diag1[["diagram"]], main="RP^2")
Diag1 <- ripsDiag(X = RP2, maxdimension = 1, maxscale = 2, library="GUDHI", location = FALSE, printProgress = FALSE)
plot(Diag1[["diagram"]], main="RP^2")
RP2 <- cbind(x*y, x*z, y*z, x^2 + 1.1*y^2 +0.9*z^2)
Diag1 <- ripsDiag(X = RP2, maxdimension = 1, maxscale = 2, library="GUDHI", location = FALSE, printProgress = FALSE)
plot(Diag1[["diagram"]], main="RP^2")
RP2 <- cbind(2*x*y, 2*x*z, 2*y*z, 2*(x^2 + 1.1*y^2 +0.9*z^2))
Diag1 <- ripsDiag(X = RP2, maxdimension = 1, maxscale = 2, library="GUDHI", location = FALSE, printProgress = FALSE)
plot(Diag1[["diagram"]], main="RP^2")
n <- 500
u <- runif(n=n, min = 0, max = pi/2)
v <- runif(n=n, min = 0, max = 2*pi)
x <- sin(u)*cos(v)
y <- sin(u)*sin(v)
z <- cos(u)
N <- cbind(x,y,z) #Northern Hemisphere
RP2 <- cbind(2*x*y, 2*x*z, 2*y*z, 2*(x^2 + 1.1*y^2 +0.9*z^2))
Diag1 <- ripsDiag(X = RP2, maxdimension = 1, maxscale = 2, library="GUDHI", location = FALSE, printProgress = FALSE)
plot(Diag1[["diagram"]], main="RP^2")
cumsum(1:10)
sum(1:10)
# This script is trying to find the expectation of Beti 0.
# Interested in what happens as p to infty or n to infty
# Choose a prime p
p = 3
# choose n
n = 2
# Set the sum S = 0
S <- 0
for (k in 1:n){
S <- S + k*p^(-(n-k)^2) * P
# Reset the product P = 1
P <- 1
for (j in 0:(k-1)){
P <- P * ((1-p^(j-n))^2)/(1-p^(j-k))
}
}
# This script is trying to find the expectation of Beti 0.
# Interested in what happens as p to infty or n to infty
# Choose a prime p
p = 3
# choose n
n = 2
# Set the sum S = 0 and product P=1
S <- 0
P <-1
for (k in 1:n){
S <- S + k*p^(-(n-k)^2) * P
# Reset the product P = 1
P <- 1
for (j in 0:(k-1)){
P <- P * ((1-p^(j-n))^2)/(1-p^(j-k))
}
}
# This script is trying to find the expectation of Beti 0.
# Interested in what happens as p to infty or n to infty
# Choose a prime p
p = 3
# choose n
n = 200
# Set the sum S = 0 and product P=1
S <- 0
P <-1
for (k in 1:n){
S <- S + k*p^(-(n-k)^2) * P
# Reset the product P = 1
P <- 1
for (j in 0:(k-1)){
P <- P * ((1-p^(j-n))^2)/(1-p^(j-k))
}
}
# This script is trying to find the expectation of Beti 0.
# Interested in what happens as p to infty or n to infty
# Choose a prime p
p = 3
# choose n
n = 2
# Set the sum S = 0 and product P=1
S <- 0
P <-1
for (k in 1:n){
S <- S + k*p^(-(n-k)^2) * P
# Reset the product P = 1
P <- 1
for (j in 0:(k-1)){
P <- P * ((1-p^(j-n))^2)/(1-p^(j-k))
}
}
# This script is trying to find the expectation of Beti 0.
# Interested in what happens as p to infty or n to infty
# Choose a prime p
p = 3
# choose n
n = 4
# Set the sum S = 0 and product P=1
S <- 0
P <-1
for (k in 1:n){
S <- S + k*p^(-(n-k)^2) * P
# Reset the product P = 1
P <- 1
for (j in 0:(k-1)){
P <- P * ((1-p^(j-n))^2)/(1-p^(j-k))
}
}
# This script is trying to find the expectation of Beti 0.
# Interested in what happens as p to infty or n to infty
# Choose a prime p
p = 3
# choose n
n = 2
# Set the sum S = 0 and product P=1
S <- 0
P <-1
for (k in 1:n){
S <- S + k*p^(-(n-k)^2) * P
# Reset the product P = 1
P <- 1
for (j in 0:(k-1)){
P <- P * ((1-p^(j-n))^2)/(1-p^(j-k))
}
}
p = 3
# choose n
n = 2
# Set the sum S = 0 and product P=1
S <- 0
P <-1
for (k in 1:n){
S <- S + (k/p^(n^2))*P
# Reset the product P = 1
P <- 1
for (j in 0:(k-1)){
P <- P * ((p^n - p^j)^2)/(p^k - p^j)
}
}
p = 3
# choose n
n = 200
# Set the sum S = 0 and product P=1
S <- 0
P <-1
for (k in 1:n){
S <- S + (k/p^(n^2))*P
# Reset the product P = 1
P <- 1
for (j in 0:(k-1)){
P <- P * ((p^n - p^j)^2)/(p^k - p^j)
}
}
# This script is trying to find the expectation of Beti 0.
# Interested in what happens as p to infty or n to infty
# Choose a prime p
p = 3
# choose n
n = 20
# Set the sum S = 0 and product P=1
S <- 0
P <-1
for (k in 1:n){
S <- S + (k/p^(n^2))*P
# Reset the product P = 1
P <- 1
for (j in 0:(k-1)){
P <- P * ((p^n - p^j)^2)/(p^k - p^j)
}
}
# This script is trying to find the expectation of Beti 0.
# Interested in what happens as p to infty or n to infty
# Choose a prime p
p = 3
# choose n
n = 20
# Set the sum S = 0 and product P=1
S <- 0
P <-1
for (k in 1:n){
S <- S + (k/p^(n^2))*P
# Reset the product P = 1
P <- 1
for (j in 0:(k-1)){
P <- P * ((p^n - p^j)^2)/(p^k - p^j)
}
}
getwd()
library(crabs)
data(crabs)
library(MASS)
data(crabs)
# check
getwd()
help("setwd")
setwd("~/home/matthew/Documents/github/TDAintro/Tutorial/data")
setwd("~/Documents/github/TDAintro/Tutorial/data")
getwd()
help("read.table")
S1e <- read.table(file = "data3.txt")
plot(S1e)
getwd()
setwd("~/Documents/Junk")
setwd("~/Documents/Junk/data")
data7wdensity <- read.table(file = "data7wdensity.txt")
plot(data7wdensity)
data7 <- data7wdensity[,c(1,2)]
plot(data7)
write.table(data7, file = "data7.txt", row.names = FALSE, col.names = FALSE)
help("find")
find(data7 < 1)
find(sqrt(data7[,1]^2 + data7[,2])<1)
fromO <- (sqrt(data7[,1]^2 + data7[,2])<1)
fromO <- (sqrt(data7[,1]^2 + data7[,2]^2)<1)
from0
fromO
fromO <- (sqrt(data7[,1]^2 + data7[,2]^2)<2)
fromO <- (sqrt(data7[,1]^2 + data7[,2]^2)<2)
fromO <- sqrt(data7[,1]^2 + data7[,2]^2)
from0
fromO
plot(data7)
noise <- data7[,from0<2]
noise <- data7[,fromO<2]
noise <- data7[,fromO<2 = TRUE]
noise <- data7[, (fromO<2)=  TRUE]
noise <- data7[, where(fromO<2) =  TRUE)]
help(where)
noise <- data7[, find(fromO<2))]
noise <- data7[, find(fromO<2)]
find(fromO)
find(fromO<2)
fomO<2
fromO<2
fromO<2 == TRUE
which(fromO<2 = TRUE)
which(fromO<2 == TRUE)
help(where.is)
noise <- data7[, which(fromO<2)]
which(fromO<2)
noise_index <- which(fromO<2)
noise <- data7[, noise_index]
data7wdensity <- read.table(file = "data7wdensity.txt")
data7 <- data7wdensity[,c(1,2)]
fromO <- sqrt(data7[,1]^2 + data7[,2]^2)
noise <- data7[which(fromO<2), ]
write.table(noise, file = "data7noise.txt")
write.table(noise, file = "data7noise.txt", row.names = FALSE, col.names = FALSE)
data7nonoise <- data7[-which(fromO<2),]
write.table(data7nonoise, file = "data7nonoise.txt")
write.table(data7nonoise, file = "data7nonoise.txt", row.names = FALSE, col.names = FALSE)
